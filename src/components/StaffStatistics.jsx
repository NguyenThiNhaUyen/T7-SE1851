import React, { useEffect, useState } from "react";
import axios from "axios";
import { Pie } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import "../styles/staff.css";

ChartJS.register(ArcElement, Tooltip, Legend);

const StaffStatistics = () => {
  const [stats, setStats] = useState([]);
  const [bloodType, setBloodType] = useState("");
  const [component, setComponent] = useState("");
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");

  const fetchStatistics = () => {
    axios
      .get("http://localhost:3000/api/statistics", {
        params: { bloodType, component, fromDate, toDate },
      })
      .then((res) => {
        console.log("üìä D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API:", res.data); // Debug
        setStats(res.data);
      })
      .catch((err) => console.error("‚ùå L·ªói l·∫•y d·ªØ li·ªáu th·ªëng k√™:", err));
  };

  useEffect(() => {
    fetchStatistics();
  }, []);

  const exportToExcel = () => {
    const ws = XLSX.utils.json_to_sheet(stats);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "ThongKeTruyenMau");
    const excelBuffer = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    const data = new Blob([excelBuffer], { type: "application/octet-stream" });
    saveAs(data, "bao_cao_truyen_mau.xlsx");
  };

  return (
    <div className="staff-statistics-container">
      <h2>üìä B√°o c√°o Th·ªëng k√™ Truy·ªÅn m√°u</h2>

      <div className="filter-panel">
        <div className="form-group">
          <label>Nh√≥m m√°u:</label>
          <select value={bloodType} onChange={(e) => setBloodType(e.target.value)}>
            <option value="">-- Ch·ªçn nh√≥m m√°u --</option>
            {["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"].map(bt => (
              <option key={bt} value={bt}>{bt}</option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>Th√†nh ph·∫ßn:</label>
          <select value={component} onChange={(e) => setComponent(e.target.value)}>
            <option value="">-- Ch·ªçn th√†nh ph·∫ßn --</option>
            {["H·ªìng c·∫ßu", "Ti·ªÉu c·∫ßu", "Huy·∫øt t∆∞∆°ng"].map(c => (
              <option key={c} value={c}>{c}</option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>T·ª´ ng√†y:</label>
          <input type="date" value={fromDate} onChange={(e) => setFromDate(e.target.value)} />
        </div>

        <div className="form-group">
          <label>ƒê·∫øn ng√†y:</label>
          <input type="date" value={toDate} onChange={(e) => setToDate(e.target.value)} />
        </div>

        <div className="form-actions">
          <button onClick={fetchStatistics}>üîç L·ªçc</button>
          <button onClick={exportToExcel}>üì• Xu·∫•t Excel</button>
          <button onClick={() => {
            setBloodType("");
            setComponent("");
            setFromDate("");
            setToDate("");
            fetchStatistics(); // Reload to√†n b·ªô
          }}>‚ôªÔ∏è Xo√° b·ªô l·ªçc</button>
        </div>
      </div>



      {stats.length === 0 ? (
        <p>‚ùó Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p.</p>
      ) : (
        <>
          <table className="table">
            <thead>
              <tr>
                <th>Nh√≥m m√°u</th>
                <th>Th√†nh ph·∫ßn</th>
                <th>S·ªë l∆∞·ª£t truy·ªÅn</th>
                <th>T·ªïng th·ªÉ t√≠ch (ml)</th>
                <th>S·ªë ng∆∞·ªùi nh·∫≠n</th>
                <th>Ng√†y truy·ªÅn g·∫ßn nh·∫•t</th>
              </tr>
            </thead>
            <tbody>
              {stats.map((s, i) => (
                <tr key={i}>
                  <td>{s.blood_type}</td>
                  <td>{s.component_name}</td>
                  <td>{s.total_transfusions}</td>
                  <td>{s.total_volume}</td>
                  <td>{s.total_patients}</td>
                  <td>{s.last_date ? new Date(s.last_date).toLocaleDateString() : "N/A"}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <div style={{ maxWidth: "500px", marginTop: "2rem" }}>
            <h4>üß¨ T·ª∑ l·ªá s·ª≠ d·ª•ng th√†nh ph·∫ßn</h4>
            <Pie
              data={{
                labels: [...new Set(stats.map(s => s.component_name))],
                datasets: [{
                  label: "T·ª∑ l·ªá",
                  data: [...new Set(stats.map(s => s.component_name))].map(
                    name =>
                      stats.filter(s => s.component_name === name)
                        .reduce((acc, s) => acc + s.total_transfusions, 0)
                  ),
                  backgroundColor: ["#f87171", "#60a5fa", "#34d399"]
                }]
              }}
            />
          </div>
        </>
      )}
    </div>
  );
};

export default StaffStatistics;
