import React, { useEffect, useState } from 'react';
import { Table, Tag, Typography } from 'antd';
import axios from 'axios';

const { Text } = Typography;

/**
 * Component ch·ªçn ƒë∆°n v·ªã m√°u t·ª´ API theo componentId v√† bloodTypeId
 *
 * @param {number} componentId - ID th√†nh ph·∫ßn m√°u
 * @param {number} bloodTypeId - ID nh√≥m m√°u
 * @param {function} onSelect - Callback tr·∫£ v·ªÅ danh s√°ch ƒë∆°n v·ªã m√°u ƒë√£ ch·ªçn
 */
const BloodUnitSelector = ({ componentId, bloodTypeId, onSelect }) => {
  const [units, setUnits] = useState([]);
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  const [totalQuantity, setTotalQuantity] = useState(0);

  const [selectedComponentId, setSelectedComponentId] = useState(null); // üëâ l∆∞u component_id ƒë√£ ch·ªçn
  const [selectedUnitIds, setSelectedUnitIds] = useState([]); // üëâ l∆∞u danh s√°ch ID c√°c ƒë∆°n v·ªã m√°u ƒë√£ ch·ªçn

  // G·ªçi API khi componentId ho·∫∑c bloodTypeId thay ƒë·ªïi
  useEffect(() => {
    if (componentId && bloodTypeId) {
      axios
        .get(`/api/blood-units/available/filter?componentId=${componentId}&bloodTypeId=${bloodTypeId}`)
        .then((res) => {
          setUnits(res.data);
          setSelectedComponentId(componentId); // G√°n l·∫°i component_id
        })
        .catch((err) => console.error('L·ªói khi l·∫•y ƒë∆°n v·ªã m√°u:', err));
    }
  }, [componentId, bloodTypeId]);

  // X·ª≠ l√Ω ch·ªçn ƒë∆°n v·ªã m√°u
  const handleChange = (keys, selectedRows) => {
    setSelectedRowKeys(keys);
    const total = selectedRows.reduce((sum, unit) => sum + (unit.quantityMl || 0), 0);
    setTotalQuantity(total);
    setSelectedUnitIds(keys); // üëâ l∆∞u l·∫°i ID ƒë·ªÉ truy·ªÅn sang form cha
    onSelect?.(selectedRows); // G·ªçi callback n·∫øu c√≥
  };

  // C·ªôt b·∫£ng ƒë∆°n v·ªã m√°u
  const columns = [
    {
      title: 'M√£ ƒë∆°n v·ªã',
      dataIndex: 'unitCode',
      key: 'unitCode',
      render: (text) => <Text strong>{text}</Text>,
    },
    {
      title: 'Th·ªÉ t√≠ch',
      dataIndex: 'quantityMl',
      key: 'quantityMl',
      render: (ml) => <Text>{ml} ml</Text>,
    },
    {
      title: 'Nh√≥m m√°u',
      dataIndex: 'bloodTypeName',
      key: 'bloodTypeName',
      render: (val) => <Tag color="red">{val}</Tag>,
    },
    {
      title: 'Th√†nh ph·∫ßn',
      dataIndex: 'componentName',
      key: 'componentName',
      render: (val) => <Tag color="blue">{val}</Tag>,
    },
  ];

  return (
    <div>
      <Table
        rowKey="bloodUnitId"
        dataSource={units}
        columns={columns}
        size="small"
        pagination={false}
        bordered
        rowSelection={{
          selectedRowKeys,
          onChange: handleChange,
        }}
      />
      <div style={{ marginTop: 8 }}>
        <Text strong>T·ªïng th·ªÉ t√≠ch:</Text> {totalQuantity} ml
        <br />
        <Text type="secondary">S·ªë l∆∞·ª£ng ƒë∆°n v·ªã ƒë√£ ch·ªçn: {selectedUnitIds.length}</Text>
        <br />
        <Text type="secondary">ID th√†nh ph·∫ßn: {selectedComponentId}</Text> {/* // component_id */}
      </div>
    </div>
  );
};

export default BloodUnitSelector;
